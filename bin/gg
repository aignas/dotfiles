#!/bin/bash

prefix_with() {
    prefix="$1"
    shift
    awk -v prefix="$prefix" '{print "\x1b[31;1m" prefix "\x1b[m\t" $0}' "$@"
}

main() {
  local targets prefix
  case ${1:-} in
    -t|--tag)
      prefix=tag
      targets=$(git tag |
          sort -u |
          prefix_with "tag" || return)
      ;;
    -b|--branch)
      prefix=branch
      targets=$(git branch |
        grep -v HEAD |
        sed "s/.* //" |
        sed "s#remotes/[^/]*/##" |
        sort -u |
        prefix_with "branch" || return)
      ;;
    -c|--commit)
        targets=$(git log --color=always --oneline |
            prefix_with "commit" || return)
        ;;
    --all)
      prefix=branch
      targets=$({
          git branch --all |
            grep -v HEAD |
            sed "s/.* //" |
            sed "s#remotes/[^/]*/##" |
            prefix_with "branch"
          git tag |
            prefix_with "tag"
        } || return)
      ;;
    -h|--help|*)
      cat <<EOF
Interactive browsing of revisions

Subcommands:
 [-b|--branch]: branch (default)
 [-t|--tag]: tag
 [-c|--commit]: commit TBD
EOF
      ;;
  esac
  [[ -z ${targets} ]] && return
  target=$(echo "$targets" |
    sk --no-hscroll --ansi -d "\t" -n 2) || return
  echo "$target" | awk '{print $2}'
}

param='--commit'
if [[ "-*" == "$1" ]]; then
    param="$1"
    shift
fi
rev="$(main "$param")"
[[ -z $rev ]] && exit 0
git "$@" "$rev"
