#!/bin/bash

set -oe pipefail

# depends on having this script in the path
export DOTFILES_ROOT="${DOTFILES_ROOT:-$(command -v "$0" | xargs dirname)/..}"
cd "${DOTFILES_ROOT}"
# shellcheck source=/dev/null
source "./script/logging.sh"

print_help() {
    cat <<EOF
$(basename "$0") -- dotfiles management

Usage: $(basename "$0") [options]

Default is to update the dotfiles and setup the system for work.

Options:
 -e, --edit     Open dotfiles directory for editing
 -h, --help     Show this help message and exti
 --no-push      Don't push the updated dotfiles repo
 --no-gitconfig Don't setup gitconfig
EOF
}

while test $# -gt 0; do
    case "$1" in
    "-h" | "--help") print_help ;;
    "-e" | "--edit") exec e "${DOTFILES_ROOT}" ;;
    "--no-push")
        NO_PUSH=true
        shift
        continue
        ;;
    "--no-gitconfig")
        [ -f "${DOTFILES_ROOT}/git/gitconfig.symlink" ] || touch "${DOTFILES_ROOT}/git/gitconfig.symlink"
        shift
        continue
        ;;
    *)
        echo "Invalid option: $1"
        print_help
        exit 1
        ;;
    esac
    exit 0
done

# Update if successful
[[ -z ${NO_PUSH:-} ]] && {
    [[ -n "$(git -C "${DOTFILES_ROOT}" diff)" ]] &&
        fail "Commit the changes and try again."
    info "Rebasing on master"
    git -C "${DOTFILES_ROOT}" pull --rebase
    info "Updating submodules"
    git -C "${DOTFILES_ROOT}" submodule update --recursive
}

info "Bootstrapping..."
"${DOTFILES_ROOT}/script/bootstrap" --overwrite

# Update if successful
[[ -z ${NO_PUSH:-} ]] && {
    info "Pushing"
    git -C "${DOTFILES_ROOT}" push
}

exit 0
