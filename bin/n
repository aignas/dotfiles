#!/bin/bash
set -euo pipefail

pushd () {
    command pushd "$@" > /dev/null
}

popd () {
    command popd "$@" > /dev/null
}

die() {
    echo >&2 ERROR: $@
    echo >&2 Exiting...
    exit 1
}

commit() {
    local -r dir="$1"
    shift

    msg="$*"
    if [ $# -eq 0 ]; then
        msg=${1:-snapshot}
    fi

    if git -C "$dir" diff --exit-code >/dev/null; then
        echo "no changes: $(basename $dir)"
        return 1
    else
        echo "commiting changes: $(basename $dir)"
    fi

    git -C "$dir" add -A .
    git -C "$dir" commit -am "${msg}"
    git -C "$dir" pull origin main --rebase || :
    git -C "$dir" push -u origin main || :
}

notes_dir() {
    dir="$HOME/.$1"
    [[ -d $dir ]] || die directory "$dir" does not exist
    echo $dir
}

build() {
    d=notes
    if [[ "$#" != 0 && "$1" == --work ]]; then
        d=work
        shift
    fi

    pushd "$(notes_dir "$d")"
    checkpoint || :

    cat <<EOF
############ Watchexec metadata ################
# created: $(_target ${WATCHEXEC_CREATED_PATH:-unknown})
# removed: $(_target ${WATCHEXEC_REMOVED_PATH:-unknown})
# renamed: $(_target ${WATCHEXEC_RENAMED_PATH:-unknown})
# written: $(_target ${WATCHEXEC_WRITTEN_PATH:-unknown})
# path   : $(_target ${WATCHEXEC_META_CHANGED_PATH:-unknown})
# common : $(_target ${WATCHEXEC_COMMON_PATH:-unknown})
################################################

EOF

    if [[ -n "${WATCHEXEC_WRITTEN_PATH:-}" ]]; then
        # No rsync, just copy the updated file
        local -r rel_path="$(_target "${WATCHEXEC_WRITTEN_PATH}")"
        echo "Transforming a single file ${rel_path}"
        cp zettel/"${rel_path}" neuron/"${rel_path}"

        gsed -i -E \
            -e 's|\(personal/|(|g' \
            -e 's|\[([a-zA-Z 0-9]+)\]\((.*).md\)|[[\2\|\1]]|g' \
            "neuron/${rel_path}"
    else
        echo "Copying all files"
        rsync -rL --delete --delete-excluded \
            --filter="- /personal/2021*" \
            --filter="- /personal/diary.md" \
            --filter="- /personal/todo.md" \
            --filter="- /personal/index.md" \
            zettel/* neuron/

        echo "Transforming links to neuron style"
        gsed -i -E \
            -e 's|\(personal/|(|g' \
            -e 's|\[([a-zA-Z 0-9]+)\]\((.*).md\)|[[\2\|\1]]|g' \
            neuron/*.md neuron/personal/*.md
        echo "Done"
    fi
    popd
}

checkpoint() {
    git add -A .
    git commit -m "autocommit"
}

_target() {
    echo "${1#*zettel/}"
}

neuron() {
    build "$@"

    d=notes
    if [[ "$#" != 0 && "$1" == --work ]]; then
        d=work
        shift
    fi

    args=($@)
    if [[ "$#" == 0 ]]; then
        args=(
            -o /tmp
            gen
            --watch
            --pretty-urls
            --serve 0.0.0.0:8080
        )
    fi

    set -x
    exec docker run \
        --rm \
        --tty \
        --interactive \
        --publish 8080:8080 \
        --volume "$(notes_dir $d)/neuron:/notes" \
        sridca/neuron:1.9.31.0 \
        neuron "${args[@]}"

    # See https://hub.docker.com/r/sridca/neuron/tags?page=1&ordering=last_updated
    # for new releases
}

rename() {
    [[ "${1:-}" != "" ]] || die "No arguments supplied"

    case ${2:-} in
        '')
            rg "$1" -w
            exit 0
            ;;
        *)
            if [[ "$#" != 2 ]]; then
                echo no spaces in the name plz
                exit 1
            fi

            rg "$1" -l zettel | xargs gsed -i "s/($1)/($2)/g"
            mv "zettel/$1.md" "zettel/$2.md"
            git add -A zettel
            git commit -m "Rename: $1 -> $2"
            ls -l zettel | head
            ;;
    esac
}

main() {
    command="$1"; shift

    case "$command" in
        serve|neuron)   neuron "$@" ;;
        build)          build "$@" ;;
        commit)         commit ~/.notes "$@" || commit ~/.work "$@" ;;
        rename)         rename "$@" ;;
        *)              die unknown command "$command" ;;
    esac
}

main "$@"
