# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

#zmodload zsh/zprof # NOTE: uncomment for profiling

export DOTFILES="$HOME/.dotfiles"
export GOPATH="${HOME}/gocode"
export XDG_DATA_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}"
export GOENV_ROOT="${DOTFILES}/golang/goenv"
export PATH="${GOENV_ROOT}/bin:${GOPATH}/bin:${DOTFILES}/bin:${PATH}"
export EDITOR="nvim"
export SKIM_DEFAULT_COMMAND="git ls-tree -r --name-only HEAD || fd --type f ."
export HISTFILE=~/.zsh_history
export HISTSIZE=10000
export SAVEHIST=10000
#export DEBUG_GIT_PROMPT=true
export GIT_PROMPT_SHELL=true

setopt APPEND_HISTORY
setopt INC_APPEND_HISTORY
setopt SHARE_HISTORY
setopt EXTENDED_HISTORY
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_REDUCE_BLANKS

# aliases
alias b='bat'
alias g='git'
alias gd='git diff'
alias gs='git status'
alias wip='git commit -am "WIP"'
alias l='exa'
alias ll='exa -l'
alias la='exa -a'
alias vc='e ~/.config/nvim/init.vim'

alias shed="docker run --name shed --volume ${PWD}:/x --workdir /x --tty --interactive --rm aignas/shed:debian"

wexec() {
    exts="$1";shift
    watchexec --clear --exts "$exts" --restart "wrap $*"
}
alias bazelw="wexec yaml,go,bazel,bzl,star bazel"
alias cargow="wexec toml,rs cargo"
alias gow="wexec go go"
# Original idea based on: https://github.com/rust-lang/rfcs/issues/2324,
# however it would be great to have a 'cargo doc' to include the stdlib docs
# instead of linking to the online ones.
cargodocw () {
    # pipe-tar is so fast for lots of small files
    src="$(dirname "$(rustup doc --path)")"
    dest="./target/doc"
    echo "Copying standard rust documentation:"
    echo "$src -> $dest"
    rm -rf "$dest"
    mkdir -p "$dest"
    (cd "$src" && tar -cf - .) | (cd "$dest" && tar -xpf -)

    cargow doc --all --document-private-items $@
}

# initialize autocomplete here, otherwise functions won't be loaded
autoload -U compinit
compinit -d
zstyle 'history' 'completion' 'git'
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*' insert-tab pending
compdef g=git
compdef l=exa

trysource() {
    if [[ -f "${1}" ]]; then
        source "${1}"
    fi
}
trysource "${HOME}/.local.sh"
trysource "${HOME}/.localrc"
trysource "${HOME}/.config/fzf/completion.zsh"
trysource "${HOME}/.config/fzf/key-bindings.zsh"
trysource "${DOTFILES}/zsh/p10k/powerlevel10k.zsh-theme"
trysource "${DOTFILES}/zsh/p10k.zsh"

# Functions, OS specific, so that they do not appear in the path.
[[ "$(get_os)" == "ArchLinux" ]] && aur() {
case "$1" in
    "--help"|"-h")
        cat <<EOF
AUR downloading function.

Usage:
  aur [-s|--search] [PACKAGE_NAME]
EOF
return
;;
''|'-s'|'--search')
    local input
    if [[ -z $2 ]]; then
        echo -n "enter AUR search term: "
        read input
    else
        input="$2"
    fi
    selection=$(
    curl --silent "https://aur.archlinux.org/rpc/?v=5&type=search&arg=$input" |
        jq -r '.results[] | "\(.NumVotes)\t\(.Name)\t\(.Description)"' |
        awk '{pop=$1;name=$2; $1="";$2=""; printf "%5d \x1b[34;1m%s\x1b[m\t%s\n", pop, name, $0}' |
        sort -n -r |
        column -t -s $'\t' |
        fzf --ansi |
        awk '{print $2}')
            aur "$selection"
            return
            ;;
        *)
            local dir="${HOME}/aur/$1"
            [[ ! -d "$dir" ]] && git clone "https://aur.archlinux.org/$1.git" "$dir"

            pushd "$dir"
            git checkout .
            git pull --rebase origin master
            ;;
    esac
}

[ -f "${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf.zsh ] && source "${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf.zsh
