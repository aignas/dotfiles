#!/usr/bin/env zsh

export DOTFILES="$HOME/.dotfiles"
export DOTFILES_OS="$(${DOTFILES}/bin/get_os)"
export SH_PLUGIN="${DOTFILES}/sh-plugins/bin"
export GOPATH="${HOME}/gocode"
export PATH="${GOPATH}/bin:${DOTFILES}/bin:${PATH}"
[[ -d ${HOME}/.skim/bin ]] && export PATH="${HOME}/.skim/bin:${PATH}"

export EDITOR="nvim"
export SKIM_DEFAULT_COMMAND="fd ."

# {{{ config
export HISTFILE=~/.zsh_history
export HISTSIZE=10000
export SAVEHIST=10000

setopt APPEND_HISTORY           # adds history
# adds history incrementally and share it across sessions
setopt INC_APPEND_HISTORY SHARE_HISTORY
setopt EXTENDED_HISTORY         # add timestamps to history

# don't record dupes in history
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_REDUCE_BLANKS
# }}}
# {{{ aliases
alias b='bat'
alias g='git'
alias vc='e ~/.config/nvim/init.vim'
alias l='exa'
alias ll='exa -l'
# }}}

# initialize autocomplete here, otherwise functions won't be loaded
autoload -U compinit
compinit
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*' insert-tab pending
compdef g=git
compdef l=exa
compdef ll=exa

zstyle \
  'history' \
  'completion' \
  'git'

#{{{ Prompt
_git_prompt() { "${SH_PLUGIN}/git_prompt" "$@"; }

# The following are stolen adaptet form @agkozak's wonderful prompt:
# https://github.com/agkozak/agkozak-zsh-prompt, which got this functionality
# was specifically added by @psprint in
# https://github.com/agkozak/agkozak-zsh-prompt/pull/11
#
# This contains just the bare minimum in order to get everything working on my
# machine.

precmd() {
  setopt LOCAL_OPTIONS NO_IGNORE_BRACES
  old="${psvar[4]}"
  new=$(date +%s)
  psvar[4]="$new"
  diff=$(( new - old ))
  if [[ -n $old && $diff -gt 5 ]]; then
    psvar[3]="${diff}s"
  fi

  typeset -g VCS_INFO_FD=${RANDOM}
  exec {VCS_INFO_FD}< <(_git_prompt --no-status)
  zle -F "$VCS_INFO_FD" _vcs_info_callback_1

  typeset -g VCS_INFO_FD=${RANDOM}
  exec {VCS_INFO_FD}< <(_git_prompt --no-branch --no-diff)
  zle -F "$VCS_INFO_FD" _vcs_info_callback_2
}

function _vcs_info_callback_1() { _vcs_info_callback "$1" 1; }
function _vcs_info_callback_2() { _vcs_info_callback "$1" 2; }

function _vcs_info_callback() {
  setopt LOCAL_OPTIONS NO_IGNORE_BRACES

  local FD="$1" response
  IFS='' builtin read -rs -d $'\0' -u "$FD" response
  zle -F "${FD}" exec {FD}<&- # Withdraw callback and close the file descriptor

  [[ "${psvar[${2}]}" == "${response:-empty}" ]] && return

  # Redraw on change
  psvar[${2}]="$response"
  zle && zle reset-prompt
}

function _prompt_char() {
  if [[ $? -ne 0 ]]; then
    echo "%F{red}❯%f"
    return
  fi
  echo "%F{magenta}❯%f"
}

psvar=()
setopt promptsubst
# http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html
PROMPT='%F{blue}%30<…<%~%<<%f%{$psvar[1]%}%{$psvar[2]%}%F{yellow}%{$psvar[3]%}%f
$(_prompt_char) '
#}}}

trysource() { [ -f "${1}" ] && source "${1}"; }
trysource "${HOME}/.localrc"
trysource "${HOME}/.skim/shell/completion.zsh"
trysource "${HOME}/.skim/shell/key-bindings.zsh"

#{{{ Functions
[[ "${DOTFILES_OS}" == "ArchLinux" ]] && aur() {
  case "$1" in
    "--help"|"-h")
      cat <<EOF
AUR downloading function.

Usage:
  aurd [-s|--search] [PACKAGE_NAME]
EOF
      return
      ;;
    ''|'-s'|'--search')
      local input
      if [[ -z $2 ]]; then
        echo -n "enter AUR search term: "
        read input
      else
        input="$2"
      fi
      selection=$(
        curl --silent "https://aur.archlinux.org/rpc/?v=5&type=search&arg=$input" |
          jq -r '.results[] | "\(.NumVotes)\t\(.Name)\t\(.Description)"' |
          awk '{pop=$1;name=$2; $1="";$2=""; printf "%5d \x1b[34;1m%s\x1b[m\t%s\n", pop, name, $0}' |
          sort -n -r |
          column -t -s $'\t' |
          sk --ansi |
          awk '{print $2}')
      aurd "$selection"
      return
      ;;
    *)
      local dir="${HOME}/aur/$1"
      [[ ! -d "$dir" ]] && git clone "https://aur.archlinux.org/$1.git" "$dir"

      pushd "$dir"
      git checkout .
      git pull --rebase origin master
      ;;
  esac
}

rsw () {
  echo "Running local CI [ hit CTRL+C to stop ]"
  {
    fd Cargo
    fd -e rs
  } | entr -d cargo "$@"
}

rsd () {
  # Original idea based on: https://github.com/rust-lang/rfcs/issues/2324,
  # however it would be great to have a 'cargo doc' to include the stdlib docs
  # instead of linking to the online ones.
  readonly local docpath="$(dirname "$(rustup doc --path)")/"
  echo "Syncing $docpath to ./target/doc..."
  rsync -r "$docpath" ./target/doc/
  echo "Done"
  rsw doc --all --document-private-items "$@"
}
#}}}

# vim: tw=80:ft=zsh:sw=2:ts=2:fdm=marker
