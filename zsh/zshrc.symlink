#zmodload zsh/zprof         # NOTE: uncomment for profiling

export DOTFILES="$HOME/.dotfiles"
export GOPATH="${HOME}/gocode"
export PATH="${GOPATH}/bin:${DOTFILES}/bin:${PATH}"
export EDITOR="nvim"
export SKIM_DEFAULT_COMMAND="fd ."
export HISTFILE=~/.zsh_history
export HISTSIZE=10000
export SAVEHIST=10000

setopt APPEND_HISTORY
setopt INC_APPEND_HISTORY
setopt SHARE_HISTORY
setopt EXTENDED_HISTORY
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_REDUCE_BLANKS

# aliases
alias b='bat'
alias g='git'
alias gg='git status'
alias gd='git diff'
alias vc='e ~/.config/nvim/init.vim'
alias l='exa'
alias ll='exa -l'
alias la='exa -a'
alias rsw="watchexec -e toml,rs wrap -c cargo"
alias bw="watchexec -e go,bazel,bzl wrap -c bazel"
alias shed="docker run --name shed -v ${PWD}:/x -w /x -ti --rm aignas/shed"

# initialize autocomplete here, otherwise functions won't be loaded
autoload -U compinit
compinit -d
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*' insert-tab pending
compdef g=git

zstyle 'history' 'completion' 'git'

trysource() { [ -f "${1}" ] && source "${1}"; }
trysource "${DOTFILES}/zsh/prompt.zsh"
trysource "${HOME}/.localrc"
trysource "${HOME}/.skim/shell/completion.zsh"
trysource "${HOME}/.skim/shell/key-bindings.zsh"
trysource /usr/share/skim/completion.zsh
trysource /usr/share/skim/key-bindings.zsh

# Functions
[[ "$(get_os)" == "ArchLinux" ]] && aur() {
case "$1" in
    "--help"|"-h")
        cat <<EOF
AUR downloading function.

Usage:
  aur [-s|--search] [PACKAGE_NAME]
EOF
return
;;
''|'-s'|'--search')
    local input
    if [[ -z $2 ]]; then
        echo -n "enter AUR search term: "
        read input
    else
        input="$2"
    fi
    selection=$(
    curl --silent "https://aur.archlinux.org/rpc/?v=5&type=search&arg=$input" |
        jq -r '.results[] | "\(.NumVotes)\t\(.Name)\t\(.Description)"' |
        awk '{pop=$1;name=$2; $1="";$2=""; printf "%5d \x1b[34;1m%s\x1b[m\t%s\n", pop, name, $0}' |
        sort -n -r |
        column -t -s $'\t' |
        sk --ansi |
        awk '{print $2}')
            aur "$selection"
            return
            ;;
        *)
            local dir="${HOME}/aur/$1"
            [[ ! -d "$dir" ]] && git clone "https://aur.archlinux.org/$1.git" "$dir"

            pushd "$dir"
            git checkout .
            git pull --rebase origin master
            ;;
    esac
}

rsd () {
    # Original idea based on: https://github.com/rust-lang/rfcs/issues/2324,
    # however it would be great to have a 'cargo doc' to include the stdlib docs
    # instead of linking to the online ones.
    readonly local docpath="$(dirname "$(rustup doc --path)")/"
    echo "Syncing $docpath to ./target/doc..."
    rsync -r "$docpath" ./target/doc/
    echo "Done"
    rsw doc --all --document-private-items "$@"
}
