" .vimrc configuration by Ignas Anikevičius
"
" There are numerous people, whose configuration files were copied and adapted
" and it's hard to list everybody, but the main ones are:
"
"   * Amir Salihefendic <amix3k at gmail.com>
"       http://amix.dk/blog/post/19486#The-ultimative-Vim-configuration-vimrc
"
"   * Steve Losh
"       http://stevelosh.com/blog/2010/09/coming-home-to-vim/#

" Note: Skip initialization for vim-tiny or vim-small.
if 0 | endif

if has('vim_starting')
  if &compatible
    set nocompatible               " Be iMproved
  endif

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Automatically download NeoBundle if it is not there already
let neobundle_readme=expand($HOME.'/.vim/bundle/neobundle.vim/README.md')
if !filereadable(neobundle_readme)
    silent !curl https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh | sh
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
" Refer to |:NeoBundle-examples|.
" Note: You don't set neobundle setting in .gvimrc!
" Syntax files
NeoBundle 'PKGBUILD'
NeoBundle 'ekalinin/Dockerfile.vim'
NeoBundle 'pearofducks/ansible-vim'

" Colour-schemes
NeoBundle 'reedes/vim-colors-pencil'

" General purpose plugins
NeoBundle 'tpope/vim-dispatch'
NeoBundle 'tpope/vim-abolish'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-unimpaired'

" Git runtime files and interface to git
NeoBundle 'tpope/vim-git'
NeoBundle 'tpope/vim-fugitive'

NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/vimfiler.vim'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'bling/vim-airline'
" NeoBundle 'edkolev/tmuxline.vim'

" Line required to force the right plugin name -> lh-vim-lib, and not trunk
NeoBundle 'LucHermitte/lh-vim-lib', {'name': 'lh-vim-lib'}
" Note: I haven't found the syntax to merge the two NeoBundle lines into one...
NeoBundle 'LucHermitte/local_vimrc', {'depends': 'lh-vim-lib'}

NeoBundle 'Shougo/neocomplete'
NeoBundle 'SirVer/ultisnips'
NeoBundle 'honza/vim-snippets'

NeoBundle 'Shougo/vimproc.vim', {
\   'build': {
\       'windows': 'tools\\update-dll-mingw',
\       'cygwin': 'make -f make_cygwin.mak',
\       'mac': 'make -f make_mac.mak',
\       'linux': 'make',
\       },
\   }

" Coding tools
" NOTE: Clang-complete needs Clang to operate properly
NeoBundle 'Rip-Rip/clang_complete'
NeoBundle 'scrooloose/syntastic'

" Text writing: LaTeX and Pandoc
NeoBundle 'vim-pandoc/vim-pandoc'
NeoBundle 'vim-pandoc/vim-pandoc-syntax'
NeoBundle 'vim-pandoc/vim-pandoc-after'

" Some science related things
NeoBundle 'lsdr/octave.vim'

call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck
" The below will check for removed Bundles in the vimrc and will uninstall
" them.
NeoBundleClean

syntax enable                           " Enable syntax hl

"Get out of VI's compatible mode..
set encoding=utf-8
set autoread                            " Automatically read when the file is changed from outside
set history=600                         " History size

let mapleader=","                       " Change the def leader
let maplocalleader="-"                  " Change the def leader

set guioptions=ag                       " remove toolbar, menubar and
                                        " graphical tabs

" The study, which says that white colorscheme is better for your
" productivity:
"   http://ux.stackexchange.com/a/53268/74384
set background=light                     " Set a light background

colorscheme pencil
let g:pencil_higher_contrast_ui = 1   " 0=low (def), 1=high
let g:pencil_neutral_headings = 1   " 0=blue (def), 1=normal
let g:pencil_terminal_italics = 1

" Some statusline and Airline settings
set laststatus=2
set showtabline=2
set noshowmode
set guifont=Hack\ 9

let g:airline_powerline_fonts = 0
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_theme = 'pencil'

" let g:tmuxline_powerline_separators = 0

"Favorite filetypes
set ffs=unix,dos,mac

nmap <leader>fd :se ff=dos<cr>
nmap <leader>fu :se ff=unix<cr>

set scrolloff=5             "Set 3 lines to the curors - when moving vertical..

"Turn on Wild menu
set wildmenu
set wildmode=list:longest

set laststatus=2            " Always show the status line
set cmdheight=2             " The command bar is 2 high
set relativenumber          " Show relative line numbers
set number                  " Show the current line number
set lazyredraw              " Do not redraw, when running macros: lazy redraw
set hid                     " Change buffer - without saving
set backspace=eol,start,indent "Set backspace
set autoindent              " Set auto-indent
set whichwrap+=<,>          " Backspace and cursor keys wrap to
set ignorecase smartcase    " Ignore case when searching
set incsearch hlsearch showmatch "Highlight search results
set magic                   " Set magic on
set list
set listchars=tab:»-,eol:$
autocmd FocusLost * :wa          " Save when loosing focus

" Retain indentation when we are word wrapping (needs >= Vim-7.388)
set breakindent
" Set the show break to something useful and make sure that it is not something
" that can easily occur in the code/text
set showbreak=»»

function! CurDir()
    let curdir=substitute(getcwd(), '/home/gns-ank/', "~/", "g")
    return curdir
endfunction

" Disable arrow keys
nnoremap <up> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" Do useful things with arrows
" Fugitive git status
nnoremap <Up> :Gstatus<cr>
" VimFiller window
nnoremap <Left> :<C-u>VimFilerCurrentDir -split -simple -parent -winwidth=35 -toggle -no-quit<CR>
" List of buffers
nnoremap <Right> :<C-u>Unite -no-split -buffer-name=buffer  buffer<cr>
" Syntastic errors
nnoremap <Down> :Errors<cr>

" leave the insert mode faster
inoremap jk <ESC>

" Restore cursor to file position in previous editing session
set viminfo='10,\"100,:20,%,n~/.viminfo
autocmd BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

"Switch to current dir
map <leader>cd :cd %:p:h<cr>

"If the directory in which we want to save a file is not there, create it
augroup BWCCreateDir
    au!
    autocmd BufWritePre * if expand("<afile>")!~#'^\w\+:/' && !isdirectory(expand("%:h")) | execute "silent! !mkdir -p ".shellescape(expand('%:h'), 1) | redraw! | endif
augroup END

" Exiting Gvim with a confirmation dialog:
nnoremap ZZ :call QuitPrompt()<cr>

fun! QuitPrompt()
   if has("gui_running") && tabpagenr("$") == 1 && winnr("$") == 1
      let choice = confirm("Do you really want to quit gVim?", "&yes\n&no", 1)
      if choice == 1 | wq | endif
   else | wq | endif
endfun

" Files and backups
"
" Turn backup and swap on
set backupdir=~/.vim/backup//
set directory=~/.vim/swp//
set undodir=~/.vim/undo//
set backupcopy=yes
set undofile

" Enable folding, I find it very useful
set foldenable
set foldlevel=1
set foldmethod=syntax

set expandtab
set shiftwidth=4
set tabstop=4

set smarttab
set lbr
set textwidth=79

" Paste toggle - when pasting something in, don't indent.
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

" Remove indenting on empty lines
map <leader>di :%s/\s*$//g<cr>:noh<cr>''

" Wrap lines
set wrap

" Do spell check by default
set spell

" Some mapping for spell checking
map <leader>se :setlocal spell spelllang=en_gb<CR>
map <leader>sl :setlocal spell spelllang=lt<CR>
" Vim unimpaired has [os and ]os mappings to toggle spelling

" Double spacing between sentences
set cpoptions+=J
set joinspaces

" Gzipped files
augroup gzip
    autocmd!
    autocmd BufReadPre,FileReadPre     *.gz set bin
    autocmd BufReadPost,FileReadPost   *.gz '[,']!gunzip
    autocmd BufReadPost,FileReadPost   *.gz set nobin
    autocmd BufReadPost,FileReadPost   *.gz execute ":doautocmd BufReadPost " . expand("%:r")
    autocmd BufWritePost,FileWritePost *.gz !mv <afile> <afile>:r
    autocmd BufWritePost,FileWritePost *.gz !gzip <afile>:r
    autocmd FileAppendPre              *.gz !gunzip <afile>
    autocmd FileAppendPre              *.gz !mv <afile>:r <afile>
    autocmd FileAppendPost             *.gz !mv <afile> <afile>:r
    autocmd FileAppendPost             *.gz !gzip <afile>:r
augroup END
"}}}
"{{{ Plugin configuration

" Gist
let g:gist_clip_command = 'xclip -selection clipboard'
let g:gist_detect_filetype = 1
let g:gist_browser_command = 'qutebrowser %URL%'

" Ultisnips
" Trigger configuration. Do not use <tab> if you use
" https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

let g:UltiSnipsSnippetDirectories=["UltiSnips", $HOME."/.dotfiles/vim/snippets"]

" Unite
let g:unite_source_history_yank_enable = 1
call unite#filters#matcher_default#use(['matcher_fuzzy'])
nnoremap <leader>t :<C-u>Unite -no-split -buffer-name=files   -start-insert file_rec/async:!<cr>
nnoremap <leader>fn :<C-u>Unite -no-split -buffer-name=files   -start-insert file<cr>
nnoremap <leader>fl :<C-u>Unite -no-split -buffer-name=files   -start-insert line<cr>
nnoremap <leader>r :<C-u>Unite -no-split -buffer-name=mru     -start-insert file_mru<cr>
nnoremap <leader>o :<C-u>Unite -no-split -buffer-name=outline -start-insert outline<cr>
nnoremap <leader>y :<C-u>Unite -no-split -buffer-name=yank    history/yank<cr>
nnoremap <leader>e :<C-u>Unite -no-split -buffer-name=buffer  buffer<cr>

" Custom mappings for the unite buffer
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
  " Enable navigation with control-j and control-k in insert mode
  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
endfunction

" VimFiler
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_tree_leaf_icon = " "
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▹'
let g:vimfiler_file_icon = '-'
let g:vimfiler_marked_file_icon = '✓'
let g:vimfiler_readonly_file_icon = '✗'
let g:vimfiler_time_format = '%m-%d-%y %H:%M:%S'
let g:vimfiler_ignore_pattern = '\.git\|\.DS_Store\|\.pyc'

nnoremap <Leader>d :<C-u>VimFilerCurrentDir -split -simple -parent -winwidth=35 -toggle -no-quit<CR>

" Syntastic
let g:syntastic_cpp_compiler_options="-std=c++14"   " Use a new C++ standard

" Some recommended options
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Some nice extras
let g:syntastic_error_symbol = "✗✗"
let g:syntastic_warning_symbol = "!!"
let g:syntastic_auto_jump = 3
let g:syntastic_loc_list_height = 5

" Add key bindings to quickly go through the errors syntastic finds.
" unimpaired has [l ]l for going through the errors

" Clang-complete
" Clang Complete Settings
let g:clang_use_library=1
" if there's an error, allow us to see it
let g:clang_complete_copen=1
let g:clang_complete_macros=1
let g:clang_complete_patterns=0
" Limit memory use
let g:clang_memory_percent=70
" Remove -std=c++11 if you don't use C++ for everything like I do.
let g:clang_user_options=' -std=c++11 || exit 0'
" Set this to 0 if you don't want autoselect, 1 if you want autohighlight,
" and 2 if you want autoselect. 0 will make you arrow down to select the first
" option, 1 will select the first option for you, but won't insert it unless you
" press enter. 2 will automatically insert what it thinks is right. 1 is the most
" convenient IMO, and it defaults to 0.
let g:clang_auto_select=1

set conceallevel=2
set concealcursor=vin
let g:clang_snippets=1
let g:clang_conceal_snippets=1
" The single one that works with clang_complete
let g:clang_snippets_engine='clang_complete'
"}}}

" Filetype generic

"{{{ VIM
augroup reload_vimrc
    autocmd!
    autocmd reload_vimrc BufWritePost $MYVIMRC nested source $MYVIMRC
augroup END
autocmd FileType vim set nofen
autocmd FileType vim set foldmethod=marker
"}}}
"{{{ Python section
"Run the current buffer in python - ie. on leader+space
"autocmd FileType python so ~/vim_local/syntax/python.vim
autocmd FileType python map <buffer> <leader>ll1 :w!<cr>:!./%<cr>
autocmd FileType python map <buffer> <leader>ll2 :w!<cr>:!python2 %<cr>
autocmd FileType python map <buffer> <leader>ll3 :w!<cr>:!python3 %<cr>
autocmd FileType pyrex  map <buffer> <leader>ll :w!<cr>:!python setup.py build_ext --inplace<cr>
"autocmd FileType python so ~/vim_local/plugin/python_fold.vim

"Set some bindings up for 'compile' of python
autocmd FileType python setlocal makeprg=python\ -c\ \"import\ py_compile,sys;\ sys.stderr=sys.stdout;\ py_compile.compile(r'%')\"
autocmd FileType python setlocal efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m
autocmd FileType python setlocal textwidth=79 " PEP8 friendly
autocmd FileType python setlocal colorcolumn=80 " It's much easier visually

autocmd FileType python setlocal foldmethod=indent

autocmd FileType python set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
autocmd FileType python set formatoptions=cq textwidth=72 foldignore= wildignore+=*.py[co]

function! PythonRetab()
    setlocal ts=2 sts=2 noet
    retab!
    setlocal ts=4 sts=4 et
    retab
endfunction

"Run in the Python interpreter
function! Python_Eval_VSplit_Old(interpreter) range
    let src = tempname()
    let dst = tempname()
    execute ": " . a:firstline . "," . a:lastline . "w " . src
    execute ":!" . interpreter " " . src . " > " . dst
    execute ":pedit! " . dst
endfunction
autocmd FileType python vmap <F7>2 :call Python_Eval_VSplit("ipython2")<cr>
autocmd FileType python vmap <F7>3 :call Python_Eval_VSplit("ipython")<cr>

"}}}
"{{{ LUA section
autocmd FileType lua set expandtab
autocmd FileType lua set shiftwidth=4
autocmd FileType lua set tabstop=4
autocmd FileType lua set softtabstop=4
autocmd FileType lua set textwidth=79
autocmd FileType lua set foldmethod=marker
"}}}
"{{{ C++ mappings
autocmd FileType cc map <buffer> <leader><space> :w<cr>:!make %<cr>
"}}}
"{{{ mail
autocmd FileType mail set tw=78
autocmd FileType mail set spell
autocmd FileType mail set spelllang=en_gb
"}}}
"{{{ LilyPond
" Silent lilypond pdf reader
autocmd FileType lilypond map <buffer> <F5> :!lilypond %" 2> /dev/null &<Return><Return>
autocmd FileType lilypond map <buffer> <F6> :!zathura "%<.pdf" 2> /dev/null &<Return><Return>
"}}}
"{{{ Git
autocmd FileType gitcommit set tw=72
"}}}
" {{{ Pandoc
let g:pandoc_command_latex_engine = "lualatex"
let g:pandoc#after#modules#enabled = ["unite", "ultisnips"]
let g:pandoc#folding#mode = "syntax"
" }}}

" vim: foldmethod=marker
