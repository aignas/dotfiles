" .vimrc configuration by Ignas Anikevičius
"
" There are numerous people, whose configuration files were copied and adapted
" and it's hard to list everybody, but the main ones are:
"
"   * Amir Salihefendic <amix3k at gmail.com>
"       http://amix.dk/blog/post/19486#The-ultimative-Vim-configuration-vimrc
"
"   * Steve Losh
"       http://stevelosh.com/blog/2010/09/coming-home-to-vim/#
"
"   * Neovim project defaults

" Note: Skip initialization for vim-tiny or vim-small.
if 0 | endif

if has('vim_starting')
  if &compatible
    set nocompatible               " Be iMproved
  endif

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Automatically download NeoBundle if it is not there already
let neobundle_readme=expand($HOME.'/.vim/bundle/neobundle.vim/README.md')
if !filereadable(neobundle_readme)
    silent !curl https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh | sh
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
" Refer to |:NeoBundle-examples|.
" Note: You don't set neobundle setting in .gvimrc!
" Syntax files
NeoBundle 'PKGBUILD'
NeoBundle 'ekalinin/Dockerfile.vim'
NeoBundle 'pearofducks/ansible-vim'

" Colour-schemes
NeoBundle 'reedes/vim-colors-pencil'

" General purpose plugins
NeoBundle 'tpope/vim-dispatch'
NeoBundle 'tpope/vim-abolish'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-unimpaired'

" Git runtime files and interface to git
NeoBundle 'tpope/vim-git'
NeoBundle 'tpope/vim-fugitive'

NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/vimfiler.vim'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'bling/vim-airline'

NeoBundle 'Shougo/neocomplete'
NeoBundle 'SirVer/ultisnips'
NeoBundle 'honza/vim-snippets'

NeoBundle 'Shougo/vimproc.vim', {
\   'build': {
\       'windows': 'tools\\update-dll-mingw',
\       'cygwin': 'make -f make_cygwin.mak',
\       'mac': 'make -f make_mac.mak',
\       'linux': 'make',
\       },
\   }

" Coding tools
" NOTE: Clang-complete needs Clang to operate properly
NeoBundle 'scrooloose/syntastic'

" Text writing: LaTeX and Pandoc
NeoBundle 'vim-pandoc/vim-pandoc'
NeoBundle 'vim-pandoc/vim-pandoc-syntax'
NeoBundle 'vim-pandoc/vim-pandoc-after'

" Some science related things
NeoBundle 'lsdr/octave.vim'

call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck
" The below will check for removed Bundles in the vimrc and will uninstall
" them.
NeoBundleClean

syntax enable                           " Enable syntax hl

"Get out of VI's compatible mode..
set encoding=utf-8
set autoread                            " Automatically read when the file is changed from outside
set history=10000                       " History size

let mapleader=","                       " Change the def leader
let maplocalleader="-"                  " Change the def leader

set guioptions=ag                       " remove toolbar, menubar and
                                        " graphical tabs

" The study, which says that white colorscheme is better for your
" productivity:
"   http://ux.stackexchange.com/a/53268/74384
set background=light                     " Set a light background
colorscheme pencil
let g:pencil_terminal_italics = 1

" Some statusline and Airline settings
set laststatus=2
set showtabline=2
set noshowmode
set guifont=Hack\ 9

let g:airline_powerline_fonts = 0
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_theme = 'pencil'

"Favorite filetypes
set ffs=unix,dos,mac

nmap <leader>fd :se ff=dos<cr>
nmap <leader>fu :se ff=unix<cr>

set scrolloff=5             "Set 3 lines to the curors - when moving vertical..

"Turn on Wild menu
set wildmenu
set wildmode=list:longest

set laststatus=2                " Always show the status line
set cmdheight=2                 " The command bar is 2 high
set number relativenumber       " Show relative line numbers, with the current absolute
set lazyredraw                  " Do not redraw, when running macros: lazy redraw
set hid                         " Change buffer - without saving
set backspace=eol,start,indent  " Set backspace
set autoindent                  " Set auto-indent
set whichwrap+=<,>              " Backspace and cursor keys wrap to
set ignorecase smartcase        " Ignore case when searching
set incsearch hlsearch showmatch "Highlight search results
set magic                       " Set magic on
set list
set listchars=tab:»-,eol:$,trail:-,
autocmd FocusLost * :wa          " Save when loosing focus

" Retain indentation when we are word wrapping (needs >= Vim-7.388)
set breakindent
" Set the show break to something useful and make sure that it is not something
" that can easily occur in the code/text
set showbreak=»»

" Disable arrow keys
nnoremap <up> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" Do useful things with arrows
" Fugitive git status
nnoremap <Up> :Gstatus<cr>
" VimFiller window
nnoremap <Left> :<C-u>VimFilerCurrentDir -split -simple -parent -winwidth=35 -toggle -no-quit<CR>
" List of buffers
nnoremap <Right> :<C-u>Unite -no-split -buffer-name=buffer  buffer<cr>
" Syntastic errors
nnoremap <Down> :Errors<cr>

" leave the insert mode faster
inoremap jk <ESC>

" Restore cursor to file position in previous editing session
set viminfo='10,\"100,:20,%,n~/.viminfo
autocmd BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

"Switch to current dir
map <leader>cd :cd %:p:h<cr>

" If the directory in which we want to save a file is not there, create it
" This is taken from http://stackoverflow.com/a/4294176
function! s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction
augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

" Files and backups
"
" Turn backup and swap on
set backupdir=~/.vim/backup//
set directory=~/.vim/swp//
set undodir=~/.vim/undo//
set backupcopy=yes
set undofile

" Enable folding, I find it very useful
set foldenable
set foldlevel=1
set foldmethod=syntax

set expandtab
set shiftwidth=4
set tabstop=4
set smarttab
set lbr

" Paste toggle - when pasting something in, don't indent.
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

" Remove indenting on empty lines
map <leader>di :%s/\s*$//g<cr>:noh<cr>''

" Wrap lines
set wrap

" Spelling
" Vim unimpaired provides [os and ]os mappings to toggle spelling
set spell
map <leader>se :setlocal spell spelllang=en_gb<CR>
map <leader>sl :setlocal spell spelllang=lt<CR>

" Double spacing between sentences
set cpoptions+=J
set joinspaces
"}}}
"{{{ Plugin configuration

" Gist
let g:gist_clip_command = 'xclip -selection clipboard'
let g:gist_detect_filetype = 1
let g:gist_browser_command = 'qutebrowser %URL%'

" Ultisnips
" Trigger configuration. Do not use <tab> if you use
" https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" Unite
let g:unite_source_history_yank_enable = 1
call unite#filters#matcher_default#use(['matcher_fuzzy'])
nnoremap <leader>t :<C-u>Unite -no-split -buffer-name=files   -start-insert file_rec/async:!<cr>
nnoremap <leader>fn :<C-u>Unite -no-split -buffer-name=files   -start-insert file<cr>
nnoremap <leader>fl :<C-u>Unite -no-split -buffer-name=files   -start-insert line<cr>
nnoremap <leader>r :<C-u>Unite -no-split -buffer-name=mru     -start-insert file_mru<cr>
nnoremap <leader>o :<C-u>Unite -no-split -buffer-name=outline -start-insert outline<cr>
nnoremap <leader>y :<C-u>Unite -no-split -buffer-name=yank    history/yank<cr>
nnoremap <leader>e :<C-u>Unite -no-split -buffer-name=buffer  buffer<cr>

" Custom mappings for the unite buffer
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
  " Enable navigation with control-j and control-k in insert mode
  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
endfunction

" VimFiler
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_tree_leaf_icon = " "
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▹'
let g:vimfiler_file_icon = '-'
let g:vimfiler_marked_file_icon = '✓'
let g:vimfiler_readonly_file_icon = '✗'
let g:vimfiler_time_format = '%m-%d-%y %H:%M:%S'
let g:vimfiler_ignore_pattern = '\.git\|\.DS_Store\|\.pyc'

nnoremap <Leader>d :<C-u>VimFilerCurrentDir -split -simple -parent -winwidth=35 -toggle -no-quit<CR>

" Syntastic
let g:syntastic_cpp_compiler_options="-std=c++14"   " Use a new C++ standard

" Some recommended options
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Some nice extras
let g:syntastic_error_symbol = "✗✗"
let g:syntastic_warning_symbol = "!!"
let g:syntastic_auto_jump = 3
let g:syntastic_loc_list_height = 5
"}}}

" Filetype generic

"{{{ VIM
augroup reload_vimrc
    autocmd!
    autocmd reload_vimrc BufWritePost $MYVIMRC nested source $MYVIMRC
augroup END
autocmd FileType vim set nofen
autocmd FileType vim set foldmethod=marker
"}}}
"{{{ Python section
autocmd FileType python map <buffer> <leader>ll2 :w!<cr>:!/usr/bin/env python2 %<cr>
autocmd FileType python map <buffer> <leader>ll3 :w!<cr>:!/usr/bin/env python3 %<cr>
set foldenable
set foldlevel=1
set foldmethod=syntax

set expandtab
set shiftwidth=4
set tabstop=4

set smarttab
set lbr
set textwidth=79

autocmd FileType python setlocal makeprg=/usr/bin/env\ python\ %
autocmd FileType python setlocal expandtab          " PEP8 friendly
autocmd FileType python setlocal shiftwidth         "
autocmd FileType python setlocal tabstop            "
autocmd FileType python setlocal textwidth=79       "
autocmd FileType python setlocal colorcolumn=80     " It's much easier visually
autocmd FileType python setlocal foldmethod=indent

"Run in the Python interpreter
function! Python_Eval_VSplit_Old(interpreter) range
    let src = tempname()
    let dst = tempname()
    execute ": " . a:firstline . "," . a:lastline . "w " . src
    execute ":!" . interpreter " " . src . " > " . dst
    execute ":pedit! " . dst
endfunction
autocmd FileType python vmap <F7>2 :call Python_Eval_VSplit("ipython2")<cr>
autocmd FileType python vmap <F7>3 :call Python_Eval_VSplit("ipython")<cr>

"}}}
"{{{ LUA section
autocmd FileType lua set expandtab
autocmd FileType lua set shiftwidth=4
autocmd FileType lua set tabstop=4
autocmd FileType lua set softtabstop=4
autocmd FileType lua set textwidth=79
autocmd FileType lua set foldmethod=marker
"}}}
"{{{ Git
autocmd FileType gitcommit set tw=72
"}}}
" {{{ Pandoc
let g:pandoc_command_latex_engine = "lualatex"
let g:pandoc#after#modules#enabled = ["unite", "ultisnips"]
let g:pandoc#folding#mode = "syntax"
let g:pandoc#syntax#conceal#use = 0
" }}}

" vim: foldmethod=marker
