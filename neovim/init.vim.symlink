" vim: filetype=vim
"
" Neovim/Vim configuration by Ignas Anikevičius
"
" There are numerous people, whose configuration files were copied and adapted
" and it's hard to list everybody, but the main ones are:
"
"   * Amir Salihefendic <amix3k at gmail.com>
"       http://amix.dk/blog/post/19486#The-ultimative-Vim-configuration-vimrc
"
"   * Steve Losh
"       http://stevelosh.com/blog/2010/09/coming-home-to-vim/#
"
"   * Neovim project defaults

scriptencoding utf-8
" Set no compatible on purpose
" vint: -ProhibitSetNoCompatible
set nocompatible

let s:data_dir = $HOME . '/.local/share/nvim'
let g:python3_host_prog = s:data_dir . '/venv/bin/python'
let s:backup_dir = expand(s:data_dir . '/backups/')

call plug#begin(s:data_dir . '/plugged')

" Appearance
Plug 'junegunn/seoul256.vim'
Plug 'itchyny/lightline.vim'

" useful extensions
Plug 'haya14busa/vim-asterisk'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-commentary'

" git integration
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" TMUX integration
Plug 'benmills/vimux'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'tmux-plugins/vim-tmux'
Plug 'christoomey/vim-tmux-navigator'

" other integrations
Plug 'majutsushi/tagbar'
Plug 'jremmen/vim-ripgrep'
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'w0rp/ale'
Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install --all' }
Plug 'lotabout/skim.vim'
Plug 'vimwiki/vimwiki'

" test related
Plug 'janko-m/vim-test'

" Filetype
Plug 'fatih/vim-go', { 'for': 'go', 'do': ':GoInstallBinaries' }
Plug 'cespare/vim-toml', {'for': 'toml'}
Plug 'plasticboy/vim-markdown', {'for': 'markdown'}

call plug#end()

" Generic vim {{{
" Required:
filetype plugin indent on
syntax enable               " Enable syntax hl
set autoread                " Automatically read when the file is changed from outside
set history=10000           " History size
let g:mapleader=','         " Change the def leader
let g:maplocalleader='-'    " Change the def leader

" Theming
set guioptions=ag           " remove toolbar, menubar and graphical tabs
colorscheme seoul256
let g:seoul256_background = 235
set background=dark
set laststatus=2 showtabline=2 noshowmode
let g:lightline = {
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
        \ },
        \ 'component_function': {'gitbranch': 'fugitive#head'},
        \ 'colorscheme': 'seoul256',
        \ }

set fileformats=unix,dos
set scrolloff=5             "Set 3 lines to the curors - when moving vertical..
set sidescroll=1
augroup general_settings
    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    autocmd BufReadPost *
      \ if line("'\"") >= 1 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif
    autocmd FocusLost * :wa          " Save when loosing focus
augroup END

"Turn on Wild menu
set wildmenu
set wildmode=list:longest
set laststatus=2                 " Always show the status line
set cmdheight=2                  " The command bar is 2 high
set number relativenumber        " Show relative line numbers, with the current absolute
set lazyredraw                   " Do not redraw, when running macros: lazy redraw
set hidden                       " Change buffer - without saving
set backspace=eol,start,indent   " Set backspace
set autoindent                   " Set auto-indent
set whichwrap+=<,>               " Backspace and cursor keys wrap to
set ignorecase smartcase         " Ignore case when searching
set incsearch hlsearch showmatch " Highlight search results
set magic                        " Set magic on
set list
set listchars=tab:»-,trail:-,
set breakindent
set showbreak=»»

nnoremap <silent> <leader><leader> :wa<cr>:echo "Everything saved"<cr>
map <silent> <leader>cd :cd %:p:h<cr>

" Files and backups
"
" Turn backup and swap on
set backup
set backupcopy=yes
set undofile
execute 'set backupdir=' . s:backup_dir . ',./.backup,.,/tmp'
execute 'set directory=' . s:backup_dir . ',.,./.backup,/tmp'

" Enable folding, I find it very useful
set foldenable
set foldlevel=1

set expandtab
set shiftwidth=4
set tabstop=4
set smarttab
set linebreak
set pastetoggle=<F2>

" Wrap lines
set wrap

" Spelling
" Vim unimpaired provides [os and ]os mappings to toggle spelling
set spell
map <leader>se :setlocal spell spelllang=en_gb<CR>
map <leader>sl :setlocal spell spelllang=lt<CR>

" Double spacing between sentences
set cpoptions+=J
set joinspaces
"}}}
"{{{ Plugin configuration
let g:UltiSnipsEditSplit = 'vertical'
let g:UltiSnipsUsePythonVersion = 3

" test
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>s :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>
let g:test#strategy = 'vimux'
let g:VimuxOrientation = 'h'
let g:VimuxHeight = '30'

" navigation
map *   <Plug>(asterisk-*)
nmap <silent> <leader>f :Files<CR>
nmap <silent> <leader>b :Buffers<CR>
nmap <leader>h :History
nmap <silent> <leader>gc :Commits<CR>
nmap <silent> <leader>gs :GFiles?<CR>
nmap <leader>r :Rg
nmap <silent> <leader>a :TagbarToggle<CR>

" file type handling
" vim
augroup reload_vimrc
    autocmd!
    autocmd reload_vimrc BufWritePost $MYVIMRC nested source $MYVIMRC
    autocmd FileType vim set nofen
    autocmd FileType vim set foldmethod=marker
augroup END

" go
augroup go_settings
    autocmd!
    " run goimports on save
    autocmd FileType go let g:go_fmt_command = "goimports"
    autocmd FileType go let g:go_metalinter_autosave = 1
    autocmd FileType go nnoremap <silent> <leader>god :GoDef<CR>
    autocmd FileType go nnoremap <silent> <leader>goc :GoDocBrowser<CR>
    autocmd FileType go nnoremap <silent> <leader>got :GoCoverageToggle<CR>
    autocmd FileType go let g:go_auto_type_info = 1
    autocmd FileType go let g:go_fmt_fail_silently = 1
    autocmd FileType go let g:ale_linters = {
\   'go': ['gometalinter'],
\}
augroup END


" Python
augroup python_settings
    autocmd!
    autocmd FileType python setlocal foldenable
    autocmd FileType python setlocal foldlevel=1
    autocmd FileType python setlocal foldmethod=syntax

    autocmd FileType python setlocal smarttab
    autocmd FileType python setlocal lbr
    autocmd FileType python setlocal textwidth=79

    autocmd FileType python setlocal expandtab
    autocmd FileType python setlocal shiftwidth=4
    autocmd FileType python setlocal tabstop=4
    autocmd FileType python setlocal textwidth=79
    autocmd FileType python setlocal colorcolumn=80
    autocmd FileType python setlocal foldmethod=indent
augroup END

" Git
augroup git_settings
    autocmd FileType gitcommit set tw=72
augroup END

" YAML
augroup yaml_settings
    autocmd FileType yaml set shiftwidth=2
    autocmd FileType yaml set tabstop=2
augroup END

"}}}
