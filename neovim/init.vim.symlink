" vim: filetype=vim
"
" Neovim/Vim configuration by Ignas Anikevičius
"
" There are numerous people, whose configuration files were copied and adapted
" and it's hard to list everybody, but the main ones are:
"
"   * Amir Salihefendic <amix3k at gmail.com>
"       http://amix.dk/blog/post/19486#The-ultimative-Vim-configuration-vimrc
"
"   * Steve Losh
"       http://stevelosh.com/blog/2010/09/coming-home-to-vim/#
"
"   * Neovim project defaults

scriptencoding utf-8
" Set no compatible on purpose
" vint: -ProhibitSetNoCompatible
set nocompatible

let s:data_dir = has('unix')
    \ ? $HOME . '/.local/share/nvim'
    \ : $HOME . '/AppData/Local/nvim-data'
" TODO: use venv on Windows
let g:python3_host_prog = has('unix')
    \ ? s:data_dir . '/venv/bin/python'
    \ : $HOME . '/AppData/Local/Programs/Python/Python36-32/python.exe'
let s:backup_dir = expand(s:data_dir . '/backups/')
let s:create_backup_dir_cmd = has('unix')
    \ ? '!mkdir -p ' . s:backup_dir
    \ : '!if not exist "' . s:backup_dir . '" mkdir "' . s:backup_dir . '"'
silent execute s:create_backup_dir_cmd

call plug#begin(s:data_dir . '/plugged')

" Appearance
Plug 'junegunn/seoul256.vim'
Plug 'itchyny/lightline.vim'

" useful extensions
Plug 'junegunn/vim-peekaboo'
Plug 'junegunn/limelight.vim' | Plug 'junegunn/goyo.vim'
Plug 'haya14busa/vim-asterisk'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-commentary'

" git integration
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'airblade/vim-gitgutter'

" TMUX integration
Plug 'benmills/vimux'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'tmux-plugins/vim-tmux'
Plug 'christoomey/vim-tmux-navigator'

" other integrations
Plug 'majutsushi/tagbar'
Plug 'jremmen/vim-ripgrep'
Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'w0rp/ale'
Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
Plug 'lotabout/skim.vim'
Plug 'vimwiki/vimwiki'

" test related
Plug 'junegunn/vader.vim'
Plug 'kana/vim-vspec'
Plug 'janko-m/vim-test'

" Filetype
Plug 'fatih/vim-go', { 'for': 'go', 'do': ':GoInstallBinaries' }
Plug 'tyru/eskk.vim', {'for': 'markdown'}
Plug 'plasticboy/vim-markdown', {'for': 'markdown'}
Plug 'rust-lang/rust.vim', {'for': 'rust'}
Plug 'cespare/vim-toml', {'for': 'toml'}
Plug 'vim-scripts/PKGBUILD', {'for': 'pkgbuild'}
Plug 'ekalinin/Dockerfile.vim', {'for': 'dockerfile'}
Plug 'pearofducks/ansible-vim', {'for': 'yaml'}
Plug 'hashivim/vim-vagrant', {'for': 'Vagantfile'}
Plug 'OrangeT/vim-csharp', {'for': 'cs'}
Plug 'Valloric/MatchTagAlways', {'for': 'html'}

call plug#end()

" Generic vim {{{

" Required:
filetype plugin indent on

syntax enable                           " Enable syntax hl

set autoread                            " Automatically read when the file is changed from outside
set history=10000                       " History size

let g:mapleader=','                       " Change the def leader
let g:maplocalleader='-'                  " Change the def leader

set guioptions=ag                       " remove toolbar, menubar and
                                        " graphical tabs

" The study, which says that white colour scheme is better for your
" productivity:
"   http://ux.stackexchange.com/a/53268/74384
set background=dark
let g:seoul256_background = 235
colorscheme seoul256

" Some statusline and Airline settings
set laststatus=2
set showtabline=2
set noshowmode
" Hack has support for this OOTB (NOTE: on ITerm you need to uncheck the
" option which let's you use a different font for non-ASCII characters)
let g:lightline = {
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
        \ },
        \ 'component_function': {'gitbranch': 'fugitive#head'},
        \ 'colorscheme': 'seoul256',
        \ }

"Favorite filetypes
set fileformats=unix,dos

set scrolloff=5             "Set 3 lines to the curors - when moving vertical..
set sidescroll=1

augroup general_settings
    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    autocmd BufReadPost *
      \ if line("'\"") >= 1 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif
    autocmd FocusLost * :wa          " Save when loosing focus
augroup END

"Turn on Wild menu
set wildmenu
set wildmode=list:longest

set noerrorbells

set laststatus=2                " Always show the status line
set cmdheight=2                 " The command bar is 2 high
set number relativenumber       " Show relative line numbers, with the current absolute
set lazyredraw                  " Do not redraw, when running macros: lazy redraw
set hidden                      " Change buffer - without saving
set backspace=eol,start,indent  " Set backspace
set autoindent                  " Set auto-indent
set whichwrap+=<,>              " Backspace and cursor keys wrap to
set ignorecase smartcase        " Ignore case when searching
set incsearch hlsearch showmatch "Highlight search results
set magic                       " Set magic on
set list
set listchars=tab:»-,trail:-,
nnoremap <leader>w :wa<cr>

" Retain indentation when we are word wrapping (needs >= Vim-7.388)
set breakindent
" Set the show break to something useful and make sure that it is not something
" that can easily occur in the code/text
set showbreak=»»

" Disable arrow keys
nnoremap <up> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" Make backspace to go to the previous buffer
nnoremap <Backspace> <C-^>

" CTRL-C doesn't trigger the InsertLeave autocmd . map to <ESC> instead.
inoremap <c-c> <ESC>

" Do useful things with arrows
" Fugitive git status
nnoremap <Up> :Gstatus<cr>

" Neomake errors
nnoremap <Down> :copen<cr>
nnoremap <S-Down> :lopen<cr>

" Switch to current directory
map <leader>cd :cd %:p:h<cr>

" Files and backups
"
" Turn backup and swap on
set backup
set backupcopy=yes
set undofile
execute 'set backupdir=' . s:backup_dir . ',./.backup,.,/tmp'
execute 'set directory=' . s:backup_dir . ',.,./.backup,/tmp'

" Enable folding, I find it very useful
set foldenable
set foldlevel=1

set expandtab
set shiftwidth=4
set tabstop=4
set smarttab
set linebreak
set pastetoggle=<F2>
map <leader>di :%s/\s*$//g<cr>:noh<cr>''

" Wrap lines
set wrap

" Spelling
" Vim unimpaired provides [os and ]os mappings to toggle spelling
set spell
map <leader>se :setlocal spell spelllang=en_gb<CR>
map <leader>sl :setlocal spell spelllang=lt<CR>

" Double spacing between sentences
set cpoptions+=J
set joinspaces
"}}}
"{{{ Plugin configuration

" vim-go configuration
" Automagically run goimports on save
let g:go_fmt_command = "goimports"
" Run lint and vet on save
let g:go_metalinter_autosave = 1

" w0rp/ale
let g:ale_haskell_ghc_options='-fno-code -v0 -dynamic'

" Enable completion where available.
let g:ale_completion_enabled = 1
let g:deoplete#enable_at_startup = 1

" janko-m/vim-test
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>s :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>
let g:test#strategy = 'vimux'
let g:VimuxOrientation = 'h'
let g:VimuxHeight = '30'

" haya14busa/vim-asterisk
map *   <Plug>(asterisk-*)

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit = 'vertical'

" junegunn/fzf.vim
nmap <silent> <leader><leader> :Files<CR>
nmap <silent> <leader>b :Buffers<CR>
nmap <leader>h :History
nmap <silent> <leader>gc :Commits<CR>
nmap <silent> <leader>gs :GFiles?<CR>
nmap <leader>r :Rg 

" file type handling
" vim
augroup reload_vimrc
    autocmd!
    autocmd reload_vimrc BufWritePost $MYVIMRC nested source $MYVIMRC
    autocmd FileType vim set nofen
    autocmd FileType vim set foldmethod=marker
augroup END

" Python
augroup python_settings
    autocmd!
    autocmd FileType python setlocal foldenable
    autocmd FileType python setlocal foldlevel=1
    autocmd FileType python setlocal foldmethod=syntax

    autocmd FileType python setlocal smarttab
    autocmd FileType python setlocal lbr
    autocmd FileType python setlocal textwidth=79

    autocmd FileType python setlocal expandtab          " PEP8 friendly
    autocmd FileType python setlocal shiftwidth=4       "
    autocmd FileType python setlocal tabstop=4          "
    autocmd FileType python setlocal textwidth=79       "
    autocmd FileType python setlocal colorcolumn=80     " It's much easier visually
    autocmd FileType python setlocal foldmethod=indent

    "Run in the Python interpreter
    function! Python_eval_vsplit(interpreter) range
        let l:src = tempname()
        let l:dst = tempname()
        execute ': ' . a:firstline . ',' . a:lastline . 'w ' . l:src
        execute ':!' . a:interpreter ' ' . l:src . ' > ' . l:dst
        execute ':pedit! ' . l:dst
    endfunction
    autocmd FileType python vmap <F7>2 :call Python_eval_vsplit("ipython2")<cr>
    autocmd FileType python vmap <F7>3 :call Python_eval_vsplit("ipython")<cr>
augroup END

" LUA section
augroup lua_settings
    autocmd FileType lua set expandtab
    autocmd FileType lua set shiftwidth=4
    autocmd FileType lua set tabstop=4
    autocmd FileType lua set softtabstop=4
    autocmd FileType lua set textwidth=79
    autocmd FileType lua set foldmethod=marker
augroup END

" Git
augroup git_settings
    autocmd FileType gitcommit set tw=72
augroup END

" Tags
nmap <F8> :TagbarToggle<CR>

let g:LanguageClient_rootMarkers = {
        \ 'javascript': ['project.json'],
        \ 'rust': ['Cargo.toml'],
        \ }

let g:LanguageClient_serverCommands = {
    \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
    \ 'javascript': ['javascript-typescript-stdio'],
    \ }

set hidden

nnoremap <F5> :call LanguageClient_contextMenu()<CR>
" Or map each action separately
nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>

" eskk

set thesaurus=~/.dotfiles/neovim/skk/skk-jisyo-utf-8.l

augroup essk_settings
    autocmd VimEnter * imap <C-j> <Plug>(eskk:toggle)
    autocmd VimEnter * cmap <C-j> <Plug>(eskk:toggle)
augroup END

"}}}
