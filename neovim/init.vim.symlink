" vim: filetype=vim
"
" Neovim/Vim configuration by Ignas Anikevičius
"
" There are numerous people, whose configuration files were copied and adapted
" and it's hard to list everybody, but the main ones are:
"
"   * Amir Salihefendic <amix3k at gmail.com>
"       http://amix.dk/blog/post/19486#The-ultimative-Vim-configuration-vimrc
"
"   * Steve Losh
"       http://stevelosh.com/blog/2010/09/coming-home-to-vim/#
"
"   * Neovim project defaults

scriptencoding utf-8
" Set no compatible on purpose
" vint: -ProhibitSetNoCompatible
set nocompatible

let s:data_dir = $HOME . '/.local/share/nvim'
let g:python3_host_prog = s:data_dir . '/venv/bin/python'
let s:backup_dir = expand(s:data_dir . '/backups/')

call plug#begin(s:data_dir . '/plugged')

Plug 'haya14busa/vim-asterisk'
Plug 'itchyny/lightline.vim'
Plug 'junegunn/seoul256.vim'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'janko-m/vim-test'
Plug 'w0rp/ale'
Plug 'tyru/eskk.vim'
Plug 'kassio/neoterm'
Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
Plug 'lotabout/skim.vim'

Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
Plug 'rust-lang/rust.vim'
Plug 'vmchale/ion-vim'
Plug 'vimwiki/vimwiki'
Plug 'euclio/vim-markdown-composer', { 'do': 'cargo build --release' }

call plug#end()

"Generate help tags
silent! helptags ALL

" Generic vim {{{
" Required:
filetype plugin indent on
syntax enable               " Enable syntax hl
set history=10000           " History size
let g:mapleader=','         " Change the def leader
let g:maplocalleader='-'    " Change the def leader

" Theming
set guioptions=ag           " remove toolbar, menubar and graphical tabs
colorscheme seoul256
"let g:seoul256_background = 235
set background=dark
set laststatus=2 showtabline=2 noshowmode
let g:lightline = {
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
        \ },
        \ 'component_function': {'gitbranch': 'fugitive#head'},
        \ 'colorscheme': 'seoul256',
        \ }

set fileformats=unix,dos
augroup general_settings
    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    autocmd BufReadPost *
      \ if line("'\"") >= 1 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif
    autocmd FocusLost * :wa          " Save when loosing focus
augroup END

set cmdheight=2                  " The command bar is 2 high
set number relativenumber        " Show relative line numbers, with the current absolute
set lazyredraw                   " Do not redraw, when running macros: lazy redraw
set hidden                       " Change buffer - without saving
set backspace=eol,start,indent   " Set backspace
set autoindent                   " Set auto-indent
set whichwrap+=<,>               " Backspace and cursor keys wrap to
set incsearch hlsearch           " Highlight search results
set magic                        " Set magic on
set list
set breakindent showbreak=»»
set path+=** wildmode=full

nnoremap <silent> <leader><leader> :wa<cr>:echo "Everything saved"<cr>
nnoremap <silent> <leader>cd :cd %:p:h<cr>

set backup
set backupcopy=yes
set undofile
execute 'set backupdir=' . s:backup_dir . ',./.backup,.,/tmp'
execute 'set directory=' . s:backup_dir . ',.,./.backup,/tmp'
set foldenable foldlevel=1
set expandtab shiftwidth=4 tabstop=4
set linebreak
set wrap
set pastetoggle=<F2>
set spell               " vim-unimpaired: use [os and ]os
set cpoptions+=J        " Double spacing between sentences
set joinspaces
map * <Plug>(asterisk-*)
nnoremap <leader>a :grep <end>
nnoremap <leader>f :find <end>
if executable("rg")
    set grepprg=rg\ --vimgrep\ --no-heading
    set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

"skim
nmap <silent> <leader>sf :Files<CR>
nmap <silent> <leader>sg :GFiles<CR>
nmap <silent> <leader>sb :Buffers<CR>

"ale
let g:ale_fix_on_save = 1
let g:ale_lint_on_insert_leave = 1
let g:ale_linters = {
    \   'go': ['gometalinter'],
    \   'rust': ['cargo'],
    \   'javascript': ['eslint'],
    \}
let g:ale_fixers = {
    \   '*': ['remove_trailing_lines', 'trim_whitespace'],
    \   'rust': ['rustfmt'],
    \   'javascript': ['eslint', 'prettier_eslint', 'importjs'],
    \}

" vim-test
let test#strategy = 'neoterm'
nmap <silent> <leader>tn :TestNearest<CR>
nmap <silent> <leader>tf :TestFile<CR>
nmap <silent> <leader>ts :TestSuite<CR>
nmap <silent> <leader>tt :TestLast<CR>
nmap <silent> <leader>tg :TestVisit<CR>

" terminal
augroup term_settings
    autocmd!
    tnoremap <Esc> <C-\><C-n>
    autocmd TermOpen * setlocal statusline=%{b:term_title}
    let g:neoterm_default_mod=':vertical :belowright'
    let g:neoterm_size='60'
augroup END


" file type handling
" vimwiki
let g:vimwiki_folding='expr'
let g:vimwiki_list = [{'path': '~/vimwiki',
            \ 'syntax': 'markdown',
            \ 'ext': '.md',
            \ }]

let g:markdown_composer_browser="qutebrowser"
let g:markdown_composer_autostart=1
let g:markdown_composer_open_browser=0
let g:markdown_composer_syntax_theme="gruvbox-dark"
autocmd FileType markdown set syntax=markdown

" vim
nnoremap <leader>vc :e $MYVIMRC<cr>
augroup reload_vimrc
    autocmd!
    autocmd reload_vimrc BufWritePost $MYVIMRC nested source $MYVIMRC
    autocmd FileType vim set nofen
    autocmd FileType vim set foldmethod=marker
augroup END

augroup js_settings
    autocmd!
    autocmd FileType javascript set shiftwidth=2
    autocmd FileType javascript set tabstop=2
augroup END

augroup html_settings
    autocmd!
    autocmd FileType html,djangohtml set shiftwidth=2
    autocmd FileType html,djangohtml set tabstop=2
augroup END


" go
augroup go_settings
    autocmd!
    " run goimports on save
    autocmd FileType go let g:go_fmt_command = "goimports"
    autocmd FileType go let g:go_metalinter_autosave = 1
    autocmd FileType go nnoremap <silent> <leader>god :GoDef<CR>
    autocmd FileType go nnoremap <silent> <leader>goc :GoDocBrowser<CR>
    autocmd FileType go nnoremap <silent> <leader>got :GoCoverageToggle<CR>
    autocmd FileType go let g:go_auto_type_info = 1
    autocmd FileType go let g:go_fmt_fail_silently = 1
augroup END

" rust
augroup rust_settings
    autocmd!
    autocmd FileType rust let g:rustfmt_autosave = 0 " ale is used
    autocmd FileType rust nnoremap <leader>cr :T cargo run -- <end>
    autocmd FileType rust nnoremap <leader>cb :T cargo build<cr>
    autocmd FileType rust nnoremap <leader>ct :T cargo test<cr>
    autocmd FileType rust nnoremap <leader>cp :T cargo bench<cr>
    autocmd FileType rust nnoremap <leader>cu :T cargo update<cr>
augroup END

" Python
augroup python_settings
    autocmd!
    autocmd FileType python setlocal foldenable
    autocmd FileType python setlocal foldlevel=1
    autocmd FileType python setlocal foldmethod=syntax

    autocmd FileType python setlocal smarttab
    autocmd FileType python setlocal lbr
    autocmd FileType python setlocal textwidth=79

    autocmd FileType python setlocal expandtab
    autocmd FileType python setlocal shiftwidth=4
    autocmd FileType python setlocal tabstop=4
    autocmd FileType python setlocal textwidth=79
    autocmd FileType python setlocal colorcolumn=80
    autocmd FileType python setlocal foldmethod=indent
augroup END

" Git
nnoremap <silent> <leader>gs :Gstatus<cr>
augroup git_settings
    autocmd!
    autocmd FileType gitcommit set tw=72
augroup END

" YAML
augroup yaml_settings
    autocmd!
    autocmd FileType yaml set shiftwidth=2
    autocmd FileType yaml set tabstop=2
augroup END

" Markdown
augroup markdown_settings
    autocmd!
    "let g:eskk#dictionary = {'path': "~/.local/share/nvim/skk-jisyo"}
    " " Use skkserv-google
    " " (https://github.com/uyorum/go-skkserv-google)
    " let g:eskk#server = {
    " \   'host': '127.0.0.1',
    " \   'port': 1178,
    " \}
augroup END

"}}}
