" .vimrc configuration by Ignas Anikevičius
"
" There are numerous people, whose configuration files were copied and adapted
" and it's hard to list everybody, but the main ones are:
"
"   * Amir Salihefendic <amix3k at gmail.com>
"       http://amix.dk/blog/post/19486#The-ultimative-Vim-configuration-vimrc
"
"   * Steve Losh
"       http://stevelosh.com/blog/2010/09/coming-home-to-vim/#
"
"   * Neovim project defaults

let s:data_dir = has('unix') ? '/home/ia/.local/share/nvim' : $HOME . '/AppData/Local/nvim-data'
set nocompatible

if has('nvim')
  if has('win32')
    " Neovim stuff: this will assume that there is a Python venv for neovim uses.
    let g:python_host_prog = 'python.exe'
    let g:python3_host_prog = $HOME.'/AppData/Local/Programs/Python/Python36-32/python.exe'
  else
    " Neovim stuff: this will assume that there is a Python venv for neovim uses.
    let g:python3_host_prog = s:data_dir . '/venv/bin/python'
  endif
endif

call plug#begin(s:data_dir . '/plugged')

Plug 'tpope/vim-abolish'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-tbone'

Plug 'janko-m/vim-test'
Plug 'mhinz/vim-startify'

Plug 'junegunn/seoul256.vim'
Plug 'itchyny/lightline.vim'

Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'neomake/neomake'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-peekaboo'
Plug 'junegunn/limelight.vim' | Plug 'junegunn/goyo.vim'
Plug 'junegunn/vader.vim'
Plug 'equalsraf/neovim-gui-shim'
Plug 'autozimu/LanguageClient-neovim', { 'do': ':UpdateRemotePlugins' }

" Filetype
Plug 'plasticboy/vim-markdown', {'for': 'markdown'}
Plug 'rust-lang/rust.vim', {'for': 'rust'}
Plug 'cespare/vim-toml', {'for': 'toml'}
Plug 'vim-scripts/PKGBUILD', {'for': 'pkgbuild'}
Plug 'ekalinin/Dockerfile.vim', {'for': 'Dockerfile'}
Plug 'pearofducks/ansible-vim', {'for': 'ansible'}
Plug 'hashivim/vim-vagrant', {'for': 'Vagrantfile'}
Plug 'OrangeT/vim-csharp', {'for': 'cs'}

" Local plugins which are in development
"Plug '/home/ia/src/vim/omnisharp-vim/', {'rev': 'feature/jobstart'}

call plug#end()

" let s:omnisharp_build_command = has('unix')
"     \ ? 'cd omnisharp-roslyn && git checkout dev && ./build.sh'
"     \ : 'cd omnisharp-roslyn && git checkout dev && .\build.ps1'
" Plug 'aignas/omnisharp-vim', {
"     \ 'branch': 'feature/jobstart',
"     \ 'do': 'yes \| ' . s:omnisharp_build_command }
" call dein#add('fsharp/vim-fsharp', {'do': 'make fsautocomplete', 'for': 'fsharp'}

" Generic vim {{{

" Required:
filetype plugin indent on

syntax enable                           " Enable syntax hl

"Get out of VI's compatible mode..
set autoread                            " Automatically read when the file is changed from outside
set history=10000                       " History size

let mapleader=","                       " Change the def leader
let maplocalleader="-"                  " Change the def leader

set guioptions=ag                       " remove toolbar, menubar and
                                        " graphical tabs

" The study, which says that white colorscheme is better for your
" productivity:
"   http://ux.stackexchange.com/a/53268/74384
set background=dark
let g:seoul256_background = 235
colorscheme seoul256
"colorscheme tender

" Some statusline and Airline settings
set laststatus=2
set showtabline=2
set noshowmode
set guifont=Hack\ 11
" Hack has support for this OOTB (NOTE: on ITerm you need to uncheck the
" option which let's you use a different font for non-ASCII characters)
let g:lightline = {
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
        \ },
        \ 'component_function': {
        \   'gitbranch': 'fugitive#head'
        \ },
        \ }

"Favorite filetypes
set ffs=unix,dos

set scrolloff=5             "Set 3 lines to the curors - when moving vertical..
set sidescroll=1

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
autocmd BufReadPost *
  \ if line("'\"") >= 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

"Turn on Wild menu
set wildmenu
set wildmode=list:longest

set noerrorbells

set laststatus=2                " Always show the status line
set cmdheight=2                 " The command bar is 2 high
set number relativenumber       " Show relative line numbers, with the current absolute
set lazyredraw                  " Do not redraw, when running macros: lazy redraw
set hid                         " Change buffer - without saving
set backspace=eol,start,indent  " Set backspace
set autoindent                  " Set auto-indent
set whichwrap+=<,>              " Backspace and cursor keys wrap to
set ignorecase smartcase        " Ignore case when searching
set incsearch hlsearch showmatch "Highlight search results
nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
set magic                       " Set magic on
set list
set listchars=tab:»-,trail:-,
autocmd FocusLost * :wa          " Save when loosing focus
nnoremap <leader>w :wa<cr>

" Retain indentation when we are word wrapping (needs >= Vim-7.388)
set breakindent
" Set the show break to something useful and make sure that it is not something
" that can easily occur in the code/text
set showbreak=»»

" Disable arrow keys
nnoremap <up> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" Make backspace to go to the previous buffer
nnoremap <Backspace> <C-^>

" Do useful things with arrows
" Fugitive git status
nnoremap <Up> :Gstatus<cr>
" VimFiller window
nnoremap <Left> :<C-u>VimFilerCurrentDir
    \ -split
    \ -simple
    \ -parent
    \ -winwidth=35
    \ -auto-cd
    \ -toggle
    \ -no-quit<CR>
" Neomake errors
nnoremap <Down> :copen<cr>

" leave the insert mode faster
inoremap jk <ESC>

" Switch to current dir
map <leader>cd :cd %:p:h<cr>

" Files and backups
"
" Turn backup and swap on
set backup
set backupcopy=yes
set undofile

let s:backup_dir = expand(s:data_dir . '/backups/')
execute "set backupdir=" . s:backup_dir . ",./.backup,.,/tmp"
execute "set directory=" . s:backup_dir . ",.,./.backup,/tmp"

" Enable folding, I find it very useful
set foldenable
set foldlevel=1

set expandtab
set shiftwidth=4
set tabstop=4
set smarttab
set lbr
set pastetoggle=<F2>
map <leader>di :%s/\s*$//g<cr>:noh<cr>''

" Wrap lines
set wrap

" Spelling
" Vim unimpaired provides [os and ]os mappings to toggle spelling
set spell
map <leader>se :setlocal spell spelllang=en_gb<CR>
map <leader>sl :setlocal spell spelllang=lt<CR>

map <leader>ll :w<CR>:!!<CR>

" Double spacing between sentences
set cpoptions+=J
set joinspaces
"}}}
"{{{ Plugin configuration

" VimWiki
let personal_wiki = {}
let personal_wiki.path = '~/Dropbox (Personal)/vimwiki/'
let personal_wiki.auto_export = 1
let personal_wiki.auto_toc = 1

let g:vimwiki_list = [personal_wiki]
" nmap <Leader>wf <Plug>VimwikiFollowLink

" janko-m/vim-test
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
let test#strategy = 'neovim'


" Neomake
autocmd! BufWritePost * Neomake
let g:neomake_open_list = 2

" Completion
if has('nvim')
    call deoplete#enable()
endif

" Gist
let g:gist_clip_command = 'xclip -selection clipboard'
let g:gist_detect_filetype = 1
let g:gist_browser_command = 'qutebrowser %URL%'

" SirVer/ultisnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

let g:ultisnips_python_style="google"
let g:ultisnips_python_triple_quoting_style="single"
let g:ultisnips_python_quoting_style="single"

" junegunn/fzf.vim
nmap <silent> <leader>ff :Files<CR>
nmap <silent> <leader>b :Buffers<CR>
nmap <leader>h :History
nmap <silent> <leader>sn :Snippets<CR>
nmap <silent> <leader>gc :Commits<CR>
nmap <silent> <leader>gs :GFiles?<CR>

" Filetype generic {{{

" vim
augroup reload_vimrc
    autocmd!
    autocmd reload_vimrc BufWritePost $MYVIMRC nested source $MYVIMRC
augroup END
autocmd FileType vim set nofen
autocmd FileType vim set foldmethod=marker

" Python
autocmd FileType python map <buffer> <leader>ll2 :w!<cr>:!/usr/bin/env python2 %<cr>
autocmd FileType python map <buffer> <leader>ll3 :w!<cr>:!/usr/bin/env python3 %<cr>
autocmd FileType python setlocal foldenable
autocmd FileType python setlocal foldlevel=1
autocmd FileType python setlocal foldmethod=syntax

autocmd FileType python setlocal smarttab
autocmd FileType python setlocal lbr
autocmd FileType python setlocal textwidth=79

autocmd FileType python setlocal expandtab          " PEP8 friendly
autocmd FileType python setlocal shiftwidth=4       "
autocmd FileType python setlocal tabstop=4          "
autocmd FileType python setlocal textwidth=79       "
autocmd FileType python setlocal colorcolumn=80     " It's much easier visually
autocmd FileType python setlocal foldmethod=indent

"Run in the Python interpreter
function! Python_Eval_VSplit_Old(interpreter) range
    let src = tempname()
    let dst = tempname()
    execute ": " . a:firstline . "," . a:lastline . "w " . src
    execute ":!" . interpreter " " . src . " > " . dst
    execute ":pedit! " . dst
endfunction
autocmd FileType python vmap <F7>2 :call Python_Eval_VSplit("ipython2")<cr>
autocmd FileType python vmap <F7>3 :call Python_Eval_VSplit("ipython")<cr>

" LUA section
autocmd FileType lua set expandtab
autocmd FileType lua set shiftwidth=4
autocmd FileType lua set tabstop=4
autocmd FileType lua set softtabstop=4
autocmd FileType lua set textwidth=79
autocmd FileType lua set foldmethod=marker

" Git
autocmd FileType gitcommit set tw=72

" C#
"autocmd BufEnter,TextChanged,InsertLeave *.cs SyntasticCheck

"let g:Omnisharp_start_server = 0
"let g:OmniSharp_server_type = 'v1'
"let g:OmniSharp_server_config_name = '/home/ia/.local/nvim/plugged/omnisharp-vim/server/config.json'
"let g:OmniSharp_selector_ui = 'fzf'
"let g:omnisharp_proc_debug = 1

" Example of using the Neomake makers
" autocmd FileType cs let g:neomake_cs_issues_maker = neomake#makers#OmniSharp#issues()
" autocmd FileType cs let g:neomake_cs_code_checker_maker = neomake#makers#OmniSharp#code_checker()
" autocmd FileType cs let g:neomake_cs_semantic_maker = neomake#makers#OmniSharp#semantic()
" autocmd FileType cs let g:neomake_cs_syntax_maker = neomake#makers#OmniSharp#syntax()
" autocmd FileType cs let g:neomake_cs_enabled_makers = ['semantic', 'issues']

"let g:OmniSharp_server_path = '/opt/omnisharp-roslyn/OmniSharp.exe'
" Only needed because I have trouble using the roslyn server
" let g:OmniSharp_server_path = '/home/ia/src/vim/omnisharp-vim/server/OmniSharp/bin/Debug/OmniSharp.exe'
"setlocal omnifunc=OmniSharp#Complete

"autocmd BufWritePost *.cs call OmniSharp#AddToProject()
"autocmd CursorHold *.cs call OmniSharp#TypeLookupWithoutDocumentation()
"
"autocmd FileType cs nnoremap gd :OmniSharpGotoDefinition<cr>
"autocmd FileType cs nnoremap <leader>fd :OmniSharpFindDefinition<cr>
"autocmd FileType cs nnoremap <leader><space> :OmniSharpGetCodeActions<cr>
"autocmd FileType cs nnoremap <leader>ft :OmniSharpFindType<cr>
"autocmd FileType cs nnoremap <leader>fs :OmniSharpFindSymbol<cr>
"autocmd FileType cs nnoremap <leader>fi :OmniSharpFindImplementations<cr>
"autocmd FileType cs nnoremap <leader>fu :OmniSharpFindUsages<cr>
"
"autocmd FileType cs nnoremap <leader>nm :OmniSharpRename<cr>
"
"autocmd FileType cs nnoremap <leader>ss :call OmniSharp#StartServerIfNotRunning()<cr>
"autocmd FileType cs nnoremap <leader>sp :OmniSharpStopServer<cr>
" }}}

" vim: filetype=vim
